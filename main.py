from flask import Flask, render_template, request, redirect, url_for
import json
import pandas as pd
import traceback

import weberp_xmlrpc  as wxr
import weberp_interface
import openai_interface as aiapi


weberp = None
ai = aiapi.ai()

app = Flask(__name__)

application_database = ''

@app.route('/', methods=['GET', 'POST'])
def login():
    error = None
    if request.method == 'POST':
        application_database = request.form['database']
        username = request.form['username']
        password = request.form['password']

        c = wxr.xmlrpcinterface(config_file='config.cfg')
        if c.connect():
            success =  c.login(application_database, username, password)
            # with Python >=3.10 can use match
            if success == -1:
                error = 'Server not responding'
            if success == 0:
                global weberp
                weberp = weberp_interface.interface(database=application_database)
                return redirect(url_for('ai_interactor'))
            if success == 1:
                error = "Bad credentials"
            if success == 2:
                error = "Undefined issue"


    return render_template('login.html', error=error)


@app.route('/ai_interactor', methods=['GET', 'POST'])
def ai_interactor():
    df = pd.DataFrame()
    question4ai = ''
    aigenquery = ''
    original_question = ''
    response = ''

    try:
        ai.reset_messages(include_assistant=False)

        if request.method == 'POST':
            question4ai = request.form.get('ai_question', '')

            # ai call system message
            ai.system_message.append(f'You are a webERP {weberp.weberp_version} consultant. ')
            ai.system_message.append(f'Use the MySQL {weberp.mysql_version} database schema definition below to generate valid SQL queries which will then be used to retrieve data which the user requested.')#
            ai.system_message.append(f'Database schema definition: {weberp.get_database_definition()}')
            ai.system_message.append('''The response must be strictly formatted as defined below without additional details 
                                        {
                                            "aiquery": <the query generated by you>,
                                            "original_question": <the original question asked with spelling corrected and correct capitalization>
                                        }
                                     .''')
            ai.system_message.append('Where relevant show the description fields not the id value.')
            ai.system_message.append('Where there are HTML codes in a string replace with proper character in the output.')
            ai.system_message.append('Where relevant round monetary amounts to 3 decimal places.')
            ai.system_message.append('When possible alias field names to human readable names including spaces and proper capitalization (eg: custname = "Customer Name").')
            ai.system_message.append('Only if there is more than one possible query then select the most likely one and include the assumption for doing so as a multiline comment in the query  ')

            # ai call user message
            ai.user_message.append(question4ai)

            # do this to ensure that there is no assistant messaging at this time
            ai.assistant_message.append('')

            question4ai = '' #reset the question so it does not interfere with the next call

            response = ai.ask()
            json_response = json.loads(response)

            if 'aiquery' in json_response:
                aigenquery = json.loads(response)['aiquery']
                original_question = json.loads(response)['original_question']

                if aigenquery.strip():
                    df = weberp.execute_query(aigenquery)
            else:
                original_question = 'Improper response received.\n\n' + response

        return render_template('ai_interactor.html'
                               , title='webERP AI Interface'
                               , heading='webERP AI Interface'
                               , dataframe=df
                               , query=aigenquery
                               , orig_question=original_question)

    except Exception as e:
        return render_template('exception.html'
                               , message=traceback.format_exc()
                               , response=response
                               , query=aigenquery
                               , orig_question=original_question
                               )


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5001, debug=True)
